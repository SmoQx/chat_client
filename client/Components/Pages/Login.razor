@page "/login"
@rendermode InteractiveServer
@using Services
@inject NavigationManager NavigationManager 
@inject YourUserNamespace.User user
@inject chat_client.Services.WebSocketService webSocketService
@using ChatMessageNamespace
@using chat_client.Services

<div class="login-container">
    <h1>Logowanie</h1>
    
    <form class="pure-form" @onsubmit="HandleLogin" @onsubmit:preventDefault> 
        <input @bind="LoginInput" type="text" placeholder="Nazwa użytkownika" required />
        <input @bind="PasswordInput" type="password" placeholder="Hasło" required />
        <button type="submit" disabled="@IsLoggingIn">
            @if (IsLoggingIn)
            {
                <i class="fa fa-spinner fa-spin"></i> <text>Logowanie...</text>
            }
            else
            {
                <i class="fa fa-chevron-circle-right"></i> <text>Zaloguj</text>
            }
        </button>
    </form>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="login-message @(IsError ? "error" : "success")">@Message</p>
    }

    <p style="text-align: center; margin-top: 20px;">
        Nie masz konta? <a href="/register">Zarejestruj się</a>
    </p>
</div>

@code {
    private string LoginInput { get; set; } = ""; 
    private string PasswordInput { get; set; } = ""; 
    private string Message { get; set; } = ""; 
    private bool IsError { get; set; }
    private bool IsLoggingIn { get; set; } = false;

    private async Task HandleLogin() 
    {
        if (IsLoggingIn) return;
        
        Message = ""; 
        IsError = false;
        IsLoggingIn = true;
        
        Console.WriteLine($"Próba logowania: Login: {LoginInput}, Password: {PasswordInput}");
        user.SetUserName(LoginInput);

        if (string.IsNullOrWhiteSpace(LoginInput) || string.IsNullOrWhiteSpace(PasswordInput))
        {
            Message = "Podaj login i hasło.";
            IsError = true;
            IsLoggingIn = false;
            return;
        }

        Console.WriteLine($"Próba logowania: Login: {LoginInput}, Password: {PasswordInput}");
        try
        {
            // Connect to WebSocket
            bool connected = await webSocketService.ConnectAsync();
            
            Console.WriteLine("check connection");
            if (!connected)
            {
                Message = "Nie udało się połączyć z serwerem.";
                IsError = true;
                IsLoggingIn = false;
                return;
            }

            // Try to sign in
            bool authSuccess = await webSocketService.SignInAsync(LoginInput, PasswordInput);

            Console.WriteLine("after auth");

            if (authSuccess)
            {
                Console.WriteLine("Login successful - redirect to chat");
                Message = "Zalogowano poprawnie.";
                IsError = false;
                user.SetUserName(LoginInput);
                
                // Force UI update
                await InvokeAsync(StateHasChanged);
                
                // Small delay to show success message
                await Task.Delay(500);
                
                NavigationManager.NavigateTo("/chat", forceLoad: true);
            }
            else
            {
                var errorMessage = webSocketService.LastSignInErrorMessage;
                if (!string.IsNullOrEmpty(errorMessage) && errorMessage.Contains("temporarily blocked"))
                {
                    Message = "Konto zostało tymczasowo zablokowane z powodu zbyt wielu nieudanych prób logowania. Spróbuj ponownie za 1 minutę.";
                }
                else
                {
                    Message = "Błędny login lub hasło.";
                }
                IsError = true;
                webSocketService.Disconnect(); // Disconnect on failed login
            }
        }
        catch (Exception ex)
        {
            Message = $"Błąd połączenia: {ex.Message}";
            IsError = true;
            webSocketService.Disconnect();
        }
        finally
        {
            IsLoggingIn = false;
        }
    }
}
